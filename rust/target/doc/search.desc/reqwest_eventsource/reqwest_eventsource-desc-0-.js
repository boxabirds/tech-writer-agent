searchState.loadedDescShard("reqwest_eventsource", 0, "Provides a simple wrapper for <code>reqwest</code> to provide an Event …\nError raised when a <code>RequestBuilder</code> cannot be cloned. See …\nThe EventSource is closed and no longer emitting Events\nThe EventSource is waiting on a response from the endpoint\nError raised by the EventSource stream fetching and parsing\nEvents created by the <code>EventSource</code>\nProvides the <code>Stream</code> implementation for the <code>Event</code> items. …\nThe <code>Content-Type</code> returned by the server is invalid\nThe <code>Last-Event-ID</code> cannot be formed into a Header to be …\nThe status code returned by the server is invalid\nThe event fired when a <code>MessageEvent</code> is received\nThe EventSource is connected\nThe event fired when the connection is opened\nSource stream is not a valid EventStream\nThe ready state of an <code>EventSource</code>\nProvides an easy interface to build an <code>EventSource</code> from a …\nThe stream ended\nThe HTTP Request could not be completed\nSource stream is not valid UTF8\nClose the EventSource stream and stop trying to reconnect\nCreate a new <code>EventSource</code> from a <code>RequestBuilder</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a simple EventSource based on a GET request\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the last event id\nWrap a <code>RequestBuilder</code>\nGet the current ready state\nHelpers to handle connection delays when receiving errors\nSet the retry policy\nA <code>RetryPolicy</code> which always emits the same delay\nThe default <code>RetryPolicy</code> when initializing an <code>EventSource</code>\nA <code>RetryPolicy</code> which backs off exponentially\nA <code>RetryPolicy</code> which never retries\nDescribes how an <code>EventSource</code> should retry on receiving an …\nThe delay to return\nThe factor of which to backoff by\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum duration to delay\nThe maximum number of retries before giving up\nThe maximum number of retries to return before giving up\nCreate a new exponential backoff retry policy\nCreate a new constant retry policy\nSubmit a new retry delay based on the <code>Error</code>, last retry …\nSet a new reconnection time if received from an <code>Event</code>\nThe start of the backoff")