searchState.loadedDescShard("backoff", 0, "<code>ExponentialBackoff</code> is a backoff implementation that …\nClock returns the current time.\nError is the error value in an operation’s result.\nExponential backoff policy with system’s clock.\nBuilder for exponential backoff policy with system’s …\nNotify is called in <code>retry_notify</code> in case of errors.\nPermanent means that it’s impossible to execute the …\n<code>SystemClock</code> uses the system’s clock to get the current …\nTransient means that the error is temporary. If the …\nThe clock used to get the current time.\nThe current retry interval.\nConstants for the exponential backoff policy.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initial retry interval.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum elapsed time after instantiating …\nThe maximum value of the back off period. Once the retry …\nThe value to multiply the current interval with for each …\nThe randomization factor to use for creating a range …\nRetries this operation according to the backoff policy. …\nCreates a transient error which is retried after the …\nRetries this operation according to the backoff policy. …\nThe system time. It is calculated when an …\n<code>Backoff</code> is a backoff policy for retrying an operation.\nContant is a backoff policy which always returns a …\nThe operation should never be retried.\nImmediately retry the operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Constant backoff with <code>interval</code> contant …\nnext_backoff() time is elapsed before it is called again. …\nResets the internal state to the initial value.\nThe default initial interval value in milliseconds (0.5 …\nThe default maximum elapsed time in milliseconds (15 …\nThe default maximum back off time in milliseconds (1 …\nThe default multiplier value (1.5 which is 50% increase …\nThe default randomization factor (0.5 which results in a …\nBuilder for <code>ExponentialBackoff</code>.\nThe clock used to get the current time.\nThe current retry interval.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the elapsed time since start_time.\nThe initial retry interval.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum elapsed time after instantiating …\nThe maximum value of the back off period. Once the retry …\nThe value to multiply the current interval with for each …\nThe randomization factor to use for creating a range …\nThe system time. It is calculated when an …\nThe initial retry interval.\nThe maximum elapsed time after instantiating …\nThe maximum value of the back off period. Once the retry …\nThe value to multiply the current interval with for each …\nThe randomization factor to use for creating a range …\nRetry implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetries given <code>operation</code> according to the <code>Backoff</code> policy …\nRetries given <code>operation</code> according to the <code>Backoff</code> policy. …")